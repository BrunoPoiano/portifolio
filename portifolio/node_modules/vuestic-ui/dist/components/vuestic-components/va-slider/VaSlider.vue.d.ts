import ColorMixin from '../../../services/color-config/ColorMixin';
declare class SliderProps {
    range: import("vue-class-component").WithDefault<boolean>;
    modelValue: import("vue-class-component").WithDefault<number | number[]>;
    trackLabel: import("vue-class-component").WithDefault<string>;
    color: import("vue-class-component").WithDefault<string>;
    trackColor: import("vue-class-component").WithDefault<string>;
    labelColor: import("vue-class-component").WithDefault<string>;
    trackLabelVisible: import("vue-class-component").WithDefault<boolean>;
    min: import("vue-class-component").WithDefault<number>;
    max: import("vue-class-component").WithDefault<number>;
    step: import("vue-class-component").WithDefault<number>;
    label: import("vue-class-component").WithDefault<string>;
    invertLabel: import("vue-class-component").WithDefault<boolean>;
    disabled: import("vue-class-component").WithDefault<boolean>;
    readonly: import("vue-class-component").WithDefault<boolean>;
    pins: import("vue-class-component").WithDefault<boolean>;
    iconPrepend: import("vue-class-component").WithDefault<string>;
    iconAppend: import("vue-class-component").WithDefault<string>;
    vertical: import("vue-class-component").WithDefault<boolean>;
    showTrack: import("vue-class-component").WithDefault<boolean>;
}
declare const VaSlider_base: import("vue-class-component").VueConstructor<ColorMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<SliderProps>> & Omit<import("vue-class-component").ExtractProps<SliderProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<SliderProps>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<SliderProps>>;
export default class VaSlider extends VaSlider_base {
    readonly dot: HTMLElement;
    readonly dot0: HTMLElement;
    readonly dot1: HTMLElement;
    readonly sliderContainer: HTMLElement;
    isFocused: boolean;
    flag: boolean;
    size: number;
    currentValue: number | number[];
    currentSliderDotIndex: number;
    isComponentExists: boolean;
    hasMouseDown: boolean;
    context: import("vue").ShallowUnwrapRef<{}>;
    get pinPositionStyle(): 'bottom' | 'left';
    get trackSizeStyle(): 'height' | 'width';
    get moreToLess(): boolean;
    get lessToMore(): boolean;
    get sliderClass(): {
        'va-slider--active': boolean;
        'va-slider--disabled': boolean;
        'va-slider--readonly': boolean;
        'va-slider--horizontal': boolean;
        'va-slider--vertical': boolean;
    };
    get dotClass(): {
        'va-slider__handler--inactive': boolean;
    }[] | {
        'va-slider__handler--on-focus': boolean;
        'va-slider__handler--inactive': boolean;
    };
    get labelStyles(): {
        color: string;
    };
    get trackStyles(): {
        backgroundColor: string;
    };
    get processedStyles(): {
        [x: string]: string;
        backgroundColor: string;
        visibility: string;
    };
    get dottedStyles(): {
        [x: string]: string;
        backgroundColor: string;
        borderColor: string;
    }[] | {
        [x: string]: string;
        backgroundColor: string;
        borderColor: string;
    };
    get val(): any;
    set val(val: any);
    get total(): number;
    get gap(): number;
    get multiple(): number;
    get interval(): number;
    get pinsCol(): number;
    get position(): any;
    get limit(): number[];
    get valueLimit(): number[];
    get isRange(): boolean;
    get propsForValidation(): {
        value: any;
        step: number;
        min: number;
        max: number;
    };
    bindEvents(): void;
    unbindEvents(): void;
    isActiveDot(index: number): boolean;
    setMouseDown(e: Event, index?: number): void;
    moveStart(e: Event, index?: number): void;
    moving(e: any): false | undefined;
    moveEnd(): false | undefined;
    moveWithKeys(event: any): void;
    checkActivePin(pin: number): boolean;
    getPinStyles(pin: number): {
        [x: string]: string;
        backgroundColor: string;
        transition: string;
    };
    getPos(e: any): number;
    getStaticData(): void;
    getValueByIndex(index: number): number;
    setCurrentValue(val: any): false | undefined;
    setValueOnPos(pixelPosition: any): void;
    limitValue(val: any): any;
    isDiff(a: any, b: any): boolean;
    clickOnContainer(e: any): void;
    mounted(): void;
    beforeUnmount(): void;
}
export {};
