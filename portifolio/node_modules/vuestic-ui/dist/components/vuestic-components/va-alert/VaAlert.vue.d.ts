import ColorMixin from '../../../services/color-config/ColorMixin';
import { StatefulMixin } from '../../vuestic-mixins/StatefulMixin/StatefulMixin';
declare class AlertProps {
    color: import("vue-class-component").WithDefault<string>;
    title: import("vue-class-component").WithDefault<string>;
    description: import("vue-class-component").WithDefault<string>;
    icon: import("vue-class-component").WithDefault<string>;
    closeText: import("vue-class-component").WithDefault<string>;
    closeable: import("vue-class-component").WithDefault<boolean>;
    dense: import("vue-class-component").WithDefault<boolean>;
    outline: import("vue-class-component").WithDefault<boolean>;
    center: import("vue-class-component").WithDefault<boolean>;
    borderColor: import("vue-class-component").WithDefault<string>;
    border: import("vue-class-component").WithDefault<string>;
    modelValue: import("vue-class-component").WithDefault<boolean>;
}
declare const VaAlert_base: import("vue-class-component").VueConstructor<ColorMixin & StatefulMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<AlertProps>> & Omit<import("vue-class-component").ExtractProps<AlertProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<AlertProps>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<AlertProps>>;
export default class VaAlert extends VaAlert_base {
    get hasIcon(): string | import("vue").Slot | undefined;
    get hasTitle(): string | import("vue").Slot | undefined;
    get alertStyle(): {
        border: string | false;
        background: string;
        boxShadow: string;
        padding: string | false;
    };
    get contentStyle(): {
        alignItems: string | false;
        color: string;
    };
    get titleStyle(): {
        color: string;
    };
    get borderClass(): string;
    get borderStyle(): {
        backgroundColor: string;
    };
    get closeIcon(): string;
    hide(): void;
}
export {};
