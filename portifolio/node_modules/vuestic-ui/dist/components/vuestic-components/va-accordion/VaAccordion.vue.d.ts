import Collapse from '../va-collapse/VaCollapse.vue';
export declare const AccordionServiceKey: unique symbol;
export declare type Accordion = {
    isInsideAccordion: boolean;
    getProps: () => any;
    getState: () => any;
    onChildChange: (child: Collapse) => void;
    onChildMounted: (child: Collapse) => void;
    onChildUnmounted: (child: Collapse) => void;
};
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: ArrayConstructor;
        default: () => never[];
    };
    multiply: {
        type: BooleanConstructor;
        default: boolean;
    };
    inset: {
        type: BooleanConstructor;
        default: boolean;
    };
    popout: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    collapses: import("vue").Ref<Collapse[]>;
    value: import("vue").WritableComputedRef<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue: unknown[];
    multiply: boolean;
    inset: boolean;
    popout: boolean;
} & {}>, {
    modelValue: unknown[];
    multiply: boolean;
    inset: boolean;
    popout: boolean;
}>;
export default _default;
