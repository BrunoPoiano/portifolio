import ColorMixin from '../../../services/color-config/ColorMixin';
import { StatefulMixin } from '../../vuestic-mixins/StatefulMixin/StatefulMixin';
import VaTab from './VaTab/VaTab.vue';
export declare class TabsService {
    private parent;
    constructor(parent: VaTabs);
    tabs: VaTab[];
    register(tab: VaTab | any): void;
    unregister(tab: VaTab): void;
    tabClick(tab: VaTab): void;
    tabFocus(tab: VaTab): void;
    tabPressEnter(tab: VaTab): void;
}
declare class TabsProps {
    modelValue: import("vue-class-component").WithDefault<string | number>;
    left: import("vue-class-component").WithDefault<boolean>;
    right: import("vue-class-component").WithDefault<boolean>;
    center: import("vue-class-component").WithDefault<boolean>;
    grow: import("vue-class-component").WithDefault<boolean>;
    disabled: import("vue-class-component").WithDefault<boolean>;
    hideSlider: import("vue-class-component").WithDefault<boolean>;
    vertical: import("vue-class-component").WithDefault<boolean>;
    color: import("vue-class-component").WithDefault<string>;
    prevIcon: import("vue-class-component").WithDefault<string>;
    nextIcon: import("vue-class-component").WithDefault<string>;
}
export declare const TabsServiceKey: unique symbol;
declare const VaTabs_base: import("vue-class-component").VueConstructor<ColorMixin & StatefulMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<TabsProps>> & Omit<import("vue-class-component").ExtractProps<TabsProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<TabsProps>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<TabsProps>>;
export default class VaTabs extends VaTabs_base {
    wrapperRef: Element;
    containerRef: Element;
    tabsRef: Element;
    tabs: any;
    sliderHeight: null | number;
    sliderWidth: null | number;
    sliderOffsetX: number;
    sliderOffsetY: number;
    showPagination: boolean;
    tabsContentOffset: number;
    mutationObserver: any;
    context: import("vue").ShallowUnwrapRef<{
        tabsService: import("vue").Ref<{
            tabs: VaTab[];
            register: (tab: any) => void;
            unregister: (tab: VaTab) => void;
            tabClick: (tab: VaTab) => void;
            tabFocus: (tab: VaTab) => void;
            tabPressEnter: (tab: VaTab) => void;
        } | null>;
    }>;
    created(): void;
    get computedClass(): {
        'va-tabs__container--left': boolean | undefined;
        'va-tabs__container--right': boolean | undefined;
        'va-tabs__container--center': boolean | undefined;
        'va-tabs__container--grow': boolean | undefined;
        'va-tabs__container--disabled': boolean | undefined;
    };
    get computedTabsClass(): {
        'va-tabs--vertical': boolean | undefined;
    };
    get tabSelected(): any;
    get sliderStyles(): {
        'background-color'?: undefined;
        height?: undefined;
        transform?: undefined;
        width?: undefined;
    } | {
        'background-color': string;
        height: string;
        transform: string;
        width?: undefined;
    } | {
        'background-color': string;
        width: string;
        transform: string;
        height?: undefined;
    };
    get paginationControlledStyles(): {
        transform: string;
    };
    get disablePaginationLeft(): boolean;
    get disablePaginationRight(): boolean;
    selectTab(tab: any): void;
    updateTabsState(): void;
    updatePagination(): void;
    movePaginationLeft(): void;
    movePaginationRight(): void;
    ensureVisible(tab: any): void;
    updateSlider(tab: any): void;
    resetSliderSizes(): void;
    mounted(): void;
    beforeUnmount(): void;
}
export {};
