import { nextTick } from 'vue';
import { DebounceLoader } from 'asva-executors';
import { Instance } from '@popperjs/core';
import { StatefulMixin } from '../../vuestic-mixins/StatefulMixin/StatefulMixin';
declare type PopperInstance = Instance | null;
declare type ClickType = 'anchor-click' | 'dropdown-content-click' | 'click-outside';
declare class DropdownProps {
    debugId: import("vue-class-component").WithDefault<string>;
    position: import("vue-class-component").WithDefault<string>;
    hoverOverTimeout: import("vue-class-component").WithDefault<number>;
    hoverOutTimeout: import("vue-class-component").WithDefault<number>;
    boundaryBody: boolean | undefined;
    modelValue: import("vue-class-component").WithDefault<boolean>;
    disabled: boolean | undefined;
    keepAnchorWidth: boolean | undefined;
    preventOverflow: import("vue-class-component").WithDefault<boolean>;
    closeOnContentClick: import("vue-class-component").WithDefault<boolean>;
    closeOnClickOutside: import("vue-class-component").WithDefault<boolean>;
    closeOnAnchorClick: import("vue-class-component").WithDefault<boolean>;
    isContentHoverable: import("vue-class-component").WithDefault<boolean>;
    offset: import("vue-class-component").WithDefault<number | number[]>;
    trigger: import("vue-class-component").WithDefault<string>;
    stateful: import("vue-class-component").WithDefault<boolean>;
}
declare const VaDropdown_base: import("vue-class-component").VueConstructor<StatefulMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<DropdownProps>> & Omit<import("vue-class-component").ExtractProps<DropdownProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<DropdownProps>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<DropdownProps>>;
export default class VaDropdown extends VaDropdown_base {
    popperInstance: PopperInstance;
    anchorWidth: number;
    hoverOverDebounceLoader: DebounceLoader;
    hoverOutDebounceLoader: DebounceLoader;
    get anchorWidthStyles(): {
        width: string;
        maxWidth: string;
    };
    get showContent(): boolean;
    handlePopperInstance(): void;
    handleClick(emitName: ClickType, toClose: boolean): void;
    onDropdownContentClick(): void;
    onClickOutside(): void;
    onAnchorClick(): void;
    onMouseOver(): void;
    onMouseOut(): void;
    registerClickOutsideListener(): void;
    unregisterClickOutsideListener(): void;
    handleDocumentClick(event: any): void;
    updateAnchorWidth(): void;
    /** @public */
    hide(): void;
    initPopper(): void;
    removePopper(): void;
    created(): void;
    mounted(): void;
    beforeUnmount(): void;
}
export {};
