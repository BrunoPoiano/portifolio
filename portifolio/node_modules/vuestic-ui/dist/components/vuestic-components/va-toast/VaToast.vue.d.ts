import ColorMixin from '../../../services/color-config/ColorMixin';
import { NotificationPosition } from './types';
declare class ToastProps {
    title: import("vue-class-component").WithDefault<string>;
    offsetY: import("vue-class-component").WithDefault<number>;
    offsetX: import("vue-class-component").WithDefault<number>;
    message: import("vue-class-component").WithDefault<string | Function>;
    icon: import("vue-class-component").WithDefault<string>;
    customClass: import("vue-class-component").WithDefault<string>;
    duration: import("vue-class-component").WithDefault<number>;
    color: import("vue-class-component").WithDefault<string>;
    closeable: import("vue-class-component").WithDefault<boolean>;
    onClose: (() => void) | undefined;
    onClick: (() => void) | undefined;
    multiLine: import("vue-class-component").WithDefault<boolean>;
    position: import("vue-class-component").WithDefault<NotificationPosition>;
    render: import("vue-class-component").WithDefault<any>;
}
declare const VaToast_base: import("vue-class-component").VueConstructor<ColorMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<ToastProps>> & Omit<import("vue-class-component").ExtractProps<ToastProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<ToastProps>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<ToastProps>>;
export default class VaToast extends VaToast_base {
    private timer;
    visible: boolean;
    get positionX(): 'right' | 'left';
    get positionY(): 'top' | 'bottom';
    get toastClasses(): string[];
    get toastStyles(): {
        [x: string]: string;
        backgroundColor: string;
    };
    destroyElement(): void;
    onToastClick(): void;
    onToastClose(): void;
    clearTimer(): void;
    startTimer(): void;
    mounted(): void;
}
export {};
