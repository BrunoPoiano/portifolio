import { ComponentPublicInstance } from 'vue';
import ColorMixin from '../../../../services/color-config/ColorMixin';
import VaTreeNode from '../VaTreeNode/VaTreeNode.vue';
declare class TreeCategoryProps {
    label: import("vue-class-component").WithDefault<string | number>;
    isOpen: boolean | undefined;
    icon: import("vue-class-component").WithDefault<string>;
    color: import("vue-class-component").WithDefault<string>;
}
declare const VaTreeCategory_base: import("vue-class-component").VueConstructor<ColorMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<TreeCategoryProps>> & Omit<import("vue-class-component").ExtractProps<TreeCategoryProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<TreeCategoryProps>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<TreeCategoryProps>>;
export default class VaTreeCategory extends VaTreeCategory_base {
    isOpenCached: boolean | undefined;
    setupContext: import("vue").ShallowUnwrapRef<{
        treeCategory: {
            onChildMounted: (node: VaTreeCategory | VaTreeNode) => void;
            onChildUnmounted: (removableNode: VaTreeCategory | VaTreeNode) => void;
        };
        treeRoot: {
            onChildMounted: (value: any) => undefined;
            onChildUnmounted: (value: any) => undefined;
        };
        nodes: import("vue").Ref<(VaTreeCategory | VaTreeNode)[]>;
    }>;
    created(): void;
    collapse(): void;
    expand(): void;
    toggle(e: MouseEvent): void;
    mounted(): void;
    beforeUnmount(): void;
}
export {};
