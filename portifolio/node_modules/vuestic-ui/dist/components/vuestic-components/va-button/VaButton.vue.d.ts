import ColorMixin from '../../../services/color-config/ColorMixin';
import { RouterLinkMixin } from '../../vuestic-mixins/RouterLinkMixin/RouterLinkMixin';
import { SizeMixin } from '../../../mixins/SizeMixin';
import { LoadingMixin } from '../../vuestic-mixins/LoadingMixin/LoadingMixin';
declare class ButtonProps {
    color: import("vue-class-component").WithDefault<string>;
    textColor: import("vue-class-component").WithDefault<string>;
    tag: import("vue-class-component").WithDefault<string>;
    outline: import("vue-class-component").WithDefault<boolean>;
    gradient: import("vue-class-component").WithDefault<boolean>;
    flat: import("vue-class-component").WithDefault<boolean>;
    type: import("vue-class-component").WithDefault<string>;
    disabled: import("vue-class-component").WithDefault<boolean>;
    block: import("vue-class-component").WithDefault<boolean>;
    rounded: import("vue-class-component").WithDefault<boolean>;
    round: import("vue-class-component").WithDefault<boolean>;
    spaceBetweenItems: import("vue-class-component").WithDefault<boolean>;
    icon: import("vue-class-component").WithDefault<string>;
    iconRight: import("vue-class-component").WithDefault<string>;
    size: import("vue-class-component").WithDefault<string>;
}
declare const VaButton_base: import("vue-class-component").VueConstructor<ColorMixin & SizeMixin & LoadingMixin & RouterLinkMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<ButtonProps>> & Omit<import("vue-class-component").ExtractProps<ButtonProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<ButtonProps>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<ButtonProps>>;
export default class VaButton extends VaButton_base {
    hoverState: boolean;
    focusState: boolean;
    context: import("vue").ShallowUnwrapRef<{}>;
    get computedType(): string | undefined;
    get isTransparentBackground(): boolean;
    get colorComputed(): string;
    get textColorComputed(): string;
    get hasDefaultSlot(): import("vue").Slot | undefined;
    get computedClass(): {
        'va-button--default': boolean;
        'va-button--flat': boolean;
        'va-button--outline': boolean;
        'va-button--disabled': boolean;
        'va-button--hover': boolean;
        'va-button--focus': boolean;
        'va-button--large': boolean;
        'va-button--small': boolean;
        'va-button--normal': boolean;
        'va-button--loading': boolean;
        'va-button--block': boolean;
        'va-button--square': boolean;
        'va-button--round': boolean;
        'va-button--space-between-items': boolean;
    };
    get shadowStyle(): string;
    get loaderSize(): string;
    get computedStyle(): {
        color: string;
        borderColor: string;
        background: string;
        boxShadow: string;
    };
    get inputListeners(): {
        [x: string]: unknown;
    } & {
        click: (event: Event) => void;
    };
    updateHoverState(isHover: boolean): void;
    updateFocusState(isFocused: boolean): void;
    /** @public */
    focus(): void;
    /** @public */
    blur(): void;
}
export {};
