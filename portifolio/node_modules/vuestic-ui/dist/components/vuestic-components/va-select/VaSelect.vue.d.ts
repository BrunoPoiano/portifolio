import { LoadingMixin } from '../../vuestic-mixins/LoadingMixin/LoadingMixin';
import ColorMixin from '../../../services/color-config/ColorMixin';
import { SelectableListMixin } from '../../vuestic-mixins/SelectableList/SelectableListMixin';
import { FormComponentMixin } from '../../vuestic-mixins/FormComponent/FormComponentMixin';
declare type DropdownIcon = {
    open: string;
    close: string;
};
declare class SelectProps {
    modelValue: import("vue-class-component").WithDefault<string | number | any[] | Record<string, any>>;
    position: import("vue-class-component").WithDefault<string>;
    allowCreate: import("vue-class-component").WithDefault<string | boolean>;
    color: import("vue-class-component").WithDefault<string>;
    multiple: import("vue-class-component").WithDefault<boolean>;
    searchable: import("vue-class-component").WithDefault<boolean>;
    disabled: import("vue-class-component").WithDefault<boolean>;
    readonly: import("vue-class-component").WithDefault<boolean>;
    separator: import("vue-class-component").WithDefault<string>;
    width: import("vue-class-component").WithDefault<string>;
    maxHeight: import("vue-class-component").WithDefault<string>;
    clearValue: import("vue-class-component").WithDefault<string>;
    noOptionsText: import("vue-class-component").WithDefault<string>;
    fixed: import("vue-class-component").WithDefault<boolean>;
    clearable: import("vue-class-component").WithDefault<boolean>;
    clearableIcon: import("vue-class-component").WithDefault<string>;
    hideSelected: import("vue-class-component").WithDefault<boolean>;
    tabindex: import("vue-class-component").WithDefault<number>;
    dropdownIcon: import("vue-class-component").WithDefault<string | DropdownIcon>;
    outline: import("vue-class-component").WithDefault<boolean>;
    bordered: import("vue-class-component").WithDefault<boolean>;
    label: import("vue-class-component").WithDefault<string>;
    placeholder: import("vue-class-component").WithDefault<string>;
}
declare const VaSelect_base: import("vue-class-component").VueConstructor<ColorMixin & LoadingMixin & FormComponentMixin & SelectableListMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<SelectProps>> & Omit<import("vue-class-component").ExtractProps<SelectProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<SelectProps>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<SelectProps>>;
export default class VaSelect extends VaSelect_base {
    searchInputValue: string;
    get doShowSearchInput(): string | boolean | undefined;
    created(): void;
    get valueComputed(): any;
    set valueComputed(value: any);
    get valueComputedString(): string;
    get doShowClearIcon(): boolean;
    get toggleIcon(): string;
    get filteredOptions(): any[];
    get selectedOption(): any;
    toClose(): boolean;
    compareOptions(one: any, two: any): boolean;
    checkIsOptionSelected(option: any): boolean;
    selectOption(option: any): void;
    addNewOption(): void;
    hoveredOption: any;
    selectHoveredOption(): void;
    hoverPreviousOption(): void;
    hoverNextOption(): void;
    doShowDropdownContent: boolean;
    get doShowDropdownContentComputed(): boolean;
    set doShowDropdownContentComputed(value: boolean);
    showDropdown(): void;
    hideDropdown(): void;
    toggleDropdown(): void;
    get isFocusedComputed(): boolean;
    onSelectClick(): void;
    focusSelect(): void;
    focusOptionList(): void;
    focusSearchBar(): void;
    /** @public */
    focus(): void;
    /** @public */
    blur(): void;
    /** @public */
    reset(): void;
    hintedSearchQuery: string;
    hintedSearchQueryTimeoutIndex: any;
    onHintedSearch(event: KeyboardEvent): void;
}
export {};
