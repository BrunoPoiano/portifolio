import ColorMixin from '../../../services/color-config/ColorMixin';
import { SelectableMixin } from '../../vuestic-mixins/SelectableMixin/SelectableMixin';
declare type ModelValue = boolean | boolean[] | string | Record<string, unknown>;
declare class CheckboxProps {
    modelValue: import("vue-class-component").WithDefault<ModelValue>;
    color: import("vue-class-component").WithDefault<string>;
    checkedIcon: import("vue-class-component").WithDefault<string>;
    indeterminateIcon: import("vue-class-component").WithDefault<string>;
}
declare const VaCheckbox_base: import("vue-class-component").VueConstructor<ColorMixin & SelectableMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<CheckboxProps>> & Omit<import("vue-class-component").ExtractProps<CheckboxProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<CheckboxProps>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<CheckboxProps>>;
export default class VaCheckbox extends VaCheckbox_base {
    SetupContext: import("vue").ShallowUnwrapRef<{
        hasKeyboardFocus: import("vue").Ref<boolean>;
        keyboardFocusListeners: {
            mousedown: (e: MouseEvent) => void;
            focus: (e: FocusEvent) => void;
            blur: (e: FocusEvent) => void;
        };
    }>;
    get computedClass(): {
        'va-checkbox--selected': boolean;
        'va-checkbox--readonly': boolean;
        'va-checkbox--disabled': boolean;
        'va-checkbox--indeterminate': boolean;
        'va-checkbox--error': boolean;
        'va-checkbox--left-label': boolean;
        'va-checkbox--on-keyboard-focus': boolean;
    };
    get labelStyle(): {
        color: string;
        padding: string;
    };
    get inputStyle(): {
        background: string;
        borderColor: string;
    } | {
        borderColor: string;
        background?: undefined;
    } | {
        background?: undefined;
        borderColor?: undefined;
    };
    get computedIconName(): string;
}
export {};
