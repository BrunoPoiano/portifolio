import 'flatpickr/dist/flatpickr.css';
declare class DatePickerProps {
    modelValue: import("vue-class-component").WithDefault<string | number | Record<string, unknown>>;
    weekDays: import("vue-class-component").WithDefault<boolean>;
    placeholder: import("vue-class-component").WithDefault<string>;
    label: import("vue-class-component").WithDefault<string>;
    disabled: import("vue-class-component").WithDefault<boolean>;
    error: import("vue-class-component").WithDefault<boolean>;
    success: import("vue-class-component").WithDefault<boolean>;
    messages: import("vue-class-component").WithDefault<any[]>;
    errorMessages: import("vue-class-component").WithDefault<any[]>;
    config: import("vue-class-component").WithDefault<Record<string, unknown>>;
}
declare const VaDatePicker_base: import("vue-class-component").VueConstructor<{
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Pick<import("vue-class-component").PublicProps, "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "class" | "style">;
    $attrs: Record<string, unknown>;
    $refs: Record<string, unknown>;
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<DatePickerProps>> & Pick<import("vue-class-component").ExtractProps<DatePickerProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "class" | "style">;
    $attrs: Record<string, unknown>;
    $refs: Record<string, unknown>;
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<DatePickerProps>>;
export default class VaDatePicker extends VaDatePicker_base {
    isOpen: boolean;
    get valueProxy(): string | number | Record<string, unknown>;
    set valueProxy(value: string | number | Record<string, unknown>);
    get fullConfig(): {
        wrap: boolean;
        nextArrow: string;
        prevArrow: string;
        disableMobile: boolean;
    } & Record<string, unknown>;
    get defaultConfig(): {
        wrap: boolean;
        nextArrow: string;
        prevArrow: string;
        disableMobile: boolean;
    };
    onOpen(selectedDates: any, dateStr: any, pcrObject: {
        calendarContainer: any;
    }): void;
}
export {};
