import ColorMixin from '../../../services/color-config/ColorMixin';
import { SizeMixin } from '../../../mixins/SizeMixin';
declare class ButtonDropdownProps {
    modelValue: import("vue-class-component").WithDefault<boolean>;
    color: import("vue-class-component").WithDefault<string>;
    outline: import("vue-class-component").WithDefault<boolean>;
    disableButton: import("vue-class-component").WithDefault<boolean>;
    disableDropdown: import("vue-class-component").WithDefault<boolean>;
    flat: import("vue-class-component").WithDefault<boolean>;
    disabled: import("vue-class-component").WithDefault<boolean>;
    size: import("vue-class-component").WithDefault<string>;
    keepAnchorWidth: import("vue-class-component").WithDefault<boolean>;
    split: boolean | undefined;
    splitTo: import("vue-class-component").WithDefault<string>;
    icon: import("vue-class-component").WithDefault<string>;
    openedIcon: import("vue-class-component").WithDefault<string>;
    position: import("vue-class-component").WithDefault<string>;
    label: string | undefined;
    offset: import("vue-class-component").WithDefault<number | number[]>;
    closeOnContentClick: import("vue-class-component").WithDefault<boolean>;
    stateful: import("vue-class-component").WithDefault<boolean>;
}
declare const VaButtonDropdown_base: import("vue-class-component").VueConstructor<ColorMixin & SizeMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<ButtonDropdownProps>> & Omit<import("vue-class-component").ExtractProps<ButtonDropdownProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<ButtonDropdownProps>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<ButtonDropdownProps>>;
export default class VaButtonDropdown extends VaButtonDropdown_base {
    get computedIcon(): string;
    get computedClass(): {
        'va-button-dropdown': boolean;
        'va-button-dropdown--split': boolean | undefined;
        'va-button-dropdown--normal': boolean;
        'va-button-dropdown--large': boolean;
        'va-button-dropdown--small': boolean;
    };
    get showDropdown(): boolean;
    set showDropdown(value: boolean);
    click(event: Event): void;
    mainButtonClick(event: Event): void;
}
export {};
