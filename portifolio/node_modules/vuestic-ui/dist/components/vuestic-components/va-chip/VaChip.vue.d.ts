import ColorMixin from '../../../services/color-config/ColorMixin';
import { RouterLinkMixin } from '../../vuestic-mixins/RouterLinkMixin/RouterLinkMixin';
import { StatefulMixin } from '../../vuestic-mixins/StatefulMixin/StatefulMixin';
declare class ChipProps {
    modelValue: import("vue-class-component").WithDefault<boolean>;
    closeable: import("vue-class-component").WithDefault<boolean>;
    color: import("vue-class-component").WithDefault<string>;
    outline: import("vue-class-component").WithDefault<boolean>;
    flat: import("vue-class-component").WithDefault<boolean>;
    icon: import("vue-class-component").WithDefault<string>;
    disabled: import("vue-class-component").WithDefault<boolean>;
    square: import("vue-class-component").WithDefault<boolean>;
    tag: import("vue-class-component").WithDefault<string>;
    size: import("vue-class-component").WithDefault<string>;
    shadow: import("vue-class-component").WithDefault<boolean>;
}
declare const VaChip_base: import("vue-class-component").VueConstructor<ColorMixin & StatefulMixin & RouterLinkMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<ChipProps>> & Omit<import("vue-class-component").ExtractProps<ChipProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<ChipProps>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<ChipProps>>;
export default class VaChip extends VaChip_base {
    SetupContext: import("vue").ShallowUnwrapRef<{
        hasKeyboardFocus: import("vue").Ref<boolean>;
        keyboardFocusListeners: {
            mousedown: (e: MouseEvent) => void;
            focus: (e: FocusEvent) => void;
            blur: (e: FocusEvent) => void;
        };
    }>;
    hoverState: boolean;
    focusState: boolean;
    created(): void;
    get iconSize(): any;
    get indexComputed(): -1 | 0;
    get computedClass(): {
        'va-chip--small': boolean;
        'va-chip--large': boolean;
        'va-chip--square': boolean;
        'va-chip--disabled': boolean;
    };
    get shadowStyle(): string | undefined;
    get computedStyle(): {
        color: string;
        borderColor: string;
        background: string;
        boxShadow: string | undefined;
    };
    updateHoverState(isHover: boolean): void;
    close(): void;
}
export {};
