import ColorMixin from '../../../services/color-config/ColorMixin';
import { InputMixin } from './helpers/InputMixin';
import { TextareaMixin } from './helpers/TextareaMixin';
declare const VaInput_base: import("vue-class-component").VueConstructor<ColorMixin & InputMixin & TextareaMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<{
        color: import("vue-class-component").WithDefault<string>;
        placeholder: import("vue-class-component").WithDefault<string>;
        clearable: import("vue-class-component").WithDefault<boolean>;
        tabindex: import("vue-class-component").WithDefault<number>;
        outline: import("vue-class-component").WithDefault<boolean>;
        bordered: import("vue-class-component").WithDefault<boolean>;
    }>> & Omit<import("vue-class-component").ExtractProps<{
        color: import("vue-class-component").WithDefault<string>;
        placeholder: import("vue-class-component").WithDefault<string>;
        clearable: import("vue-class-component").WithDefault<boolean>;
        tabindex: import("vue-class-component").WithDefault<number>;
        outline: import("vue-class-component").WithDefault<boolean>;
        bordered: import("vue-class-component").WithDefault<boolean>;
    }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<{
        color: import("vue-class-component").WithDefault<string>;
        placeholder: import("vue-class-component").WithDefault<string>;
        clearable: import("vue-class-component").WithDefault<boolean>;
        tabindex: import("vue-class-component").WithDefault<number>;
        outline: import("vue-class-component").WithDefault<boolean>;
        bordered: import("vue-class-component").WithDefault<boolean>;
    }>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<{
    color: import("vue-class-component").WithDefault<string>;
    placeholder: import("vue-class-component").WithDefault<string>;
    clearable: import("vue-class-component").WithDefault<boolean>;
    tabindex: import("vue-class-component").WithDefault<number>;
    outline: import("vue-class-component").WithDefault<boolean>;
    bordered: import("vue-class-component").WithDefault<boolean>;
}>>;
export default class VaInput extends VaInput_base {
    get labelStyle(): any;
    stateClasses(baseclass: string): string[];
    get wrapperClass(): string[];
    get computedBorderColorStyle(): {
        'border-color': string;
    } | {
        'border-color'?: undefined;
    };
    get clearIconColor(): string;
    get computedInputAttributes(): Record<string, any>;
    /** @public */
    focus(): void;
    /** @public */
    blur(): void;
    /** @public */
    reset(): void;
}
export {};
