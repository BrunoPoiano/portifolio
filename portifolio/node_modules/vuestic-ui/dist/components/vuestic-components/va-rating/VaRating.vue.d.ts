import ColorMixin from '../../../services/color-config/ColorMixin';
import { StatefulMixin } from '../../vuestic-mixins/StatefulMixin/StatefulMixin';
import { SizeMixin } from '../../../mixins/SizeMixin';
import { RatingValue } from './VaRating.types';
declare class RatingProps {
    modelValue: import("vue-class-component").WithDefault<number>;
    icon: import("vue-class-component").WithDefault<string>;
    halfIcon: import("vue-class-component").WithDefault<string>;
    emptyIcon: import("vue-class-component").WithDefault<string>;
    readonly: import("vue-class-component").WithDefault<boolean>;
    disabled: import("vue-class-component").WithDefault<boolean>;
    numbers: import("vue-class-component").WithDefault<boolean>;
    halves: import("vue-class-component").WithDefault<boolean>;
    max: import("vue-class-component").WithDefault<number>;
    clearable: import("vue-class-component").WithDefault<boolean>;
    hover: import("vue-class-component").WithDefault<boolean>;
    texts: import("vue-class-component").WithDefault<any[]>;
    textColor: string | undefined;
    unselectedColor: string | undefined;
    color: import("vue-class-component").WithDefault<string>;
}
declare const VaRating_base: import("vue-class-component").VueConstructor<ColorMixin & SizeMixin & StatefulMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<RatingProps>> & Omit<import("vue-class-component").ExtractProps<RatingProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<RatingProps>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<RatingProps>>;
export default class VaRating extends VaRating_base {
    isHovered: boolean;
    forceEmit: boolean;
    hoveredValue: RatingValue;
    mounted(): void;
    get valueProxy(): number;
    set valueProxy(value: number);
    get focusColor(): string;
    get classList(): {
        'va-rating--disabled': boolean | undefined;
        'va-rating--readonly': boolean | undefined;
    };
    get interactionsEnabled(): boolean;
    get hoverEnabled(): boolean | undefined;
    get tabIndex(): 0 | undefined;
    getItemValue(itemNumber: number): RatingValue;
    onHover(itemNumber: number, value: RatingValue): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    onArrow(event: KeyboardEvent, directon: 1 | -1): void;
    onItemSelected(itemNumber: number, value: RatingValue): void;
}
export {};
