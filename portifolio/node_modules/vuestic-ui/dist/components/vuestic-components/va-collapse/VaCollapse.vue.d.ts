import ColorMixin from '../../../services/color-config/ColorMixin';
import { StatefulMixin } from '../../vuestic-mixins/StatefulMixin/StatefulMixin';
import { Accordion } from '../va-accordion/VaAccordion.vue';
declare class Props {
    value: import("vue-class-component").WithDefault<boolean>;
    disabled: import("vue-class-component").WithDefault<boolean>;
    header: import("vue-class-component").WithDefault<string>;
    icon: import("vue-class-component").WithDefault<string>;
    solid: import("vue-class-component").WithDefault<boolean>;
    color: import("vue-class-component").WithDefault<string>;
    textColor: import("vue-class-component").WithDefault<string>;
    colorAll: import("vue-class-component").WithDefault<boolean>;
}
declare const VaCollapse_base: import("vue-class-component").VueConstructor<ColorMixin & StatefulMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<Props>> & Omit<import("vue-class-component").ExtractProps<Props> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<Props>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<Props>>;
export default class VaCollapse extends VaCollapse_base {
    height: number;
    transitionDuration: number;
    mutationObserver: any;
    valueCollapse: {
        value: undefined;
    };
    accordion: Accordion;
    SetupContext: import("vue").ShallowUnwrapRef<{
        hasKeyboardFocus: import("vue").Ref<boolean>;
        keyboardFocusListeners: {
            mousedown: (e: MouseEvent) => void;
            focus: (e: FocusEvent) => void;
            blur: (e: FocusEvent) => void;
        };
    }>;
    get body(): HTMLElement;
    get valueProxy(): any;
    set valueProxy(value: any);
    get computedClasses(): {
        'va-collapse--disabled': boolean;
        'va-collapse--solid': boolean;
        'va-collapse--active': any;
        'va-collapse--popout': any;
        'va-collapse--inset': any;
    };
    get contentStyle(): {
        paddingLeft: number | "";
        color: string;
        backgroundColor: string;
        boxShadow: string;
    };
    get stylesComputed(): {
        visibility: string;
        height: string;
        transitionDuration: string;
        background: string;
    } | {
        visibility: string;
        height: string;
        transitionDuration: string;
        background?: undefined;
    };
    get collapseIndexComputed(): -1 | 0;
    changeValue(): void;
    getHeight(): number;
    getTransitionDuration(): number;
    getTextNodeHeight(textNode: Node): number;
    setCollapseParams(): void;
    mounted(): void;
    beforeUnmount(): void;
}
export {};
