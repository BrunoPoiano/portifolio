import ColorMixin from '../../../services/color-config/ColorMixin';
declare class RadioProps {
    modelValue: import("vue-class-component").WithDefault<string | number | boolean | Record<string, unknown>>;
    option: import("vue-class-component").WithDefault<string | number | boolean | Record<string, unknown>>;
    name: import("vue-class-component").WithDefault<string | number>;
    disabled: import("vue-class-component").WithDefault<boolean>;
    label: import("vue-class-component").WithDefault<string>;
    leftLabel: import("vue-class-component").WithDefault<boolean>;
    color: import("vue-class-component").WithDefault<string>;
    tabindex: import("vue-class-component").WithDefault<number>;
}
declare const VaRadio_base: import("vue-class-component").VueConstructor<ColorMixin & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{}> & Omit<import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties & import("vue-class-component").ClassComponentHooks & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<import("vue-class-component").ExtractDefaultProps<RadioProps>> & Omit<import("vue-class-component").ExtractProps<RadioProps> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue-class-component").DefaultKeys<RadioProps>>;
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & import("vue-class-component").ExtractProps<RadioProps>>;
export default class VaRadio extends VaRadio_base {
    get isActive(): boolean;
    get computedClass(): {
        'va-radio--disabled': boolean;
        'va-radio--left-label': boolean;
    };
    get iconBackgroundComputedStyles(): {
        backgroundColor: string;
    };
    get iconDotComputedStyles(): {
        borderColor: string;
        backgroundColor: string;
    } | {
        borderColor?: undefined;
        backgroundColor?: undefined;
    };
    get iconComputedStyles(): {
        borderColor: string;
    } | {
        borderColor?: undefined;
    };
    get computedLabel(): string | number | boolean | Record<string, unknown>;
    onClick(e: Event): void;
    onFocus(e: Event): void;
    validate(): null;
    clear(): void;
}
export {};
